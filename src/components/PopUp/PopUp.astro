---
import CloseButton from "./CloseButton.astro";

const { id } = Astro.props;
---

<pop-up
  id={id}
  role="dialog"
  aria-modal="false"
  class="IHNA-popup hidden w-screen h-screen top-0 left-0 z-[9999] fixed"
>
  <div
    class="content-[''] absolute z-[20] bg-neutral-800 backdrop-blur-2xl opacity-[0.9] w-full h-full top-0 left-0 block"
  >
  </div>
  <CloseButton customClass="popclose absolute right-3 top-3 left-auto z-20" />
  <div
    class="popup-content w-11/12 z-[30] bg-white -translate-y-1/2 top-1/2 rounded-xl -translate-x-1/2 left-1/2 absolute isolate overflow-clip sm:w-1/2 2xl:w-1/3 max-w-4xl"
  >
    <slot />
  </div>
</pop-up>

<script>
  class PopUp extends HTMLElement {
    constructor() {
      super();
      // Bind the event handlers once and store them
      this.boundHandleOutsideClick = this.handleOutsideClick.bind(this);
      this.boundHandleEscapeKey = this.handleEscapeKey.bind(this);
      this.boundClosePop = this.closePop.bind(this);
    }

    connectedCallback() {
      this.popUpClose = this.querySelector(".popclose");

      if (!this.popUpClose) {
        console.error("Close button not found");
        return;
      }

      // Use the bound function for the close button as well
      this.popUpClose.addEventListener("click", this.boundClosePop);

      // Add the event listeners using the bound handlers
      this.addEventListener("click", this.boundHandleOutsideClick);
      document.addEventListener("keydown", this.boundHandleEscapeKey);
    }

    disconnectedCallback() {
      // Remove the event listeners using the bound handlers
      if (this.popUpClose) {
        this.popUpClose.removeEventListener("click", this.boundClosePop);
      }
      this.removeEventListener("click", this.boundHandleOutsideClick);
      document.removeEventListener("keydown", this.boundHandleEscapeKey);

      // If you have other cleanup tasks, add them here
    }

    handleOutsideClick(e) {
      if (!this.querySelector(".popup-content").contains(e.target)) {
        this.closePop();
      }
    }

    handleEscapeKey(e) {
      if (e.key === "Escape") {
        this.closePop();
      }
    }

    openPop() {
      this.classList.remove("hidden");
      this.classList.add("fade-in");
      this.disableScroll();
      this.setAttribute("aria-modal", true);
    }

    closePop() {
      this.classList.add("hidden");
      this.classList.remove("fade-in");
      this.enableScroll();
      this.setAttribute("aria-modal", false);
    }

    disableScroll() {
      document.body.style.overflow = "hidden";
    }

    enableScroll() {
      document.body.style.overflow = "";
    }
  }

  customElements.define("pop-up", PopUp);
</script>
